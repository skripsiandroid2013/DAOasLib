package id.ac.itats.skripsi.arga.orm.dao;

import id.ac.itats.skripsi.arga.orm.entity.tb_edge;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TB_EDGE.
*/
public class tb_edgeDao extends AbstractDao<tb_edge, Long> {

    public static final String TABLENAME = "TB_EDGE";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_edge = new Property(1, String.class, "id_edge", false, "ID_EDGE");
        public final static Property From_node = new Property(2, String.class, "from_node", false, "FROM_NODE");
        public final static Property To_node = new Property(3, String.class, "to_node", false, "TO_NODE");
        public final static Property Jarak = new Property(4, String.class, "jarak", false, "JARAK");
    };


    public tb_edgeDao(DaoConfig config) {
        super(config);
    }
    
    public tb_edgeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'TB_EDGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_EDGE' TEXT," + // 1: id_edge
                "'FROM_NODE' TEXT," + // 2: from_node
                "'TO_NODE' TEXT," + // 3: to_node
                "'JARAK' TEXT);"; // 4: jarak
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TB_EDGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, tb_edge entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String id_edge = entity.getId_edge();
        if (id_edge != null) {
            stmt.bindString(2, id_edge);
        }
 
        String from_node = entity.getFrom_node();
        if (from_node != null) {
            stmt.bindString(3, from_node);
        }
 
        String to_node = entity.getTo_node();
        if (to_node != null) {
            stmt.bindString(4, to_node);
        }
 
        String jarak = entity.getJarak();
        if (jarak != null) {
            stmt.bindString(5, jarak);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public tb_edge readEntity(Cursor cursor, int offset) {
        tb_edge entity = new tb_edge( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id_edge
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // from_node
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // to_node
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // jarak
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, tb_edge entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_edge(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFrom_node(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTo_node(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJarak(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected Long updateKeyAfterInsert(tb_edge entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(tb_edge entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    public boolean isSkipGeneration() {
		return true;
	}
}
